#Fedena
#Copyright 2011 Foradian Technologies Private Limited
#
#This product includes software developed at
#Project Fedena - http://www.projectfedena.org/
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing, software
#distributed under the License is distributed on an "AS IS" BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and
#limitations under the License.

class AttendancesController < ApplicationController
  filter_access_to :all
  # before_filter :only_assigned_employee_allowed
  def index
    @batches = []
    @config = SchoolConfiguration.find_by_config_key('StudentAttendanceType')
    unless params[:nextDate].nil?
      @today = params[:nextDate].to_date
    else
      @today = Date.today
    end
    start_date = @today.beginning_of_month
    end_date = @today.end_of_month
    # respond_to do |format|
       # format.json { render :json => {:valid => true,:today => @today}}
    # end
    
  end
  
  def subject_wise_attendance
    @batches = []
    @subjects = []
  end

  # def change_date
     # unless params[:next].nil?
      # @today = params[:next].to_date
    # else
      # @today = Date.today
    # end
    # start_date = @today.beginning_of_month
    # end_date = @today.end_of_month
    # respond_to do |format|
       # format.json { render :json => {:valid => true,:today => @today}}
    # end
  # end

  def list_subject
    @batch = Batch.find(params[:batch_id])
    @subjects = Subject.where("elective_group_id IS NOT NULL").find_all_by_batch_id(@batch.id)
    render :partial=> 'subjects'
    # if @current_user.employee? and @allow_access ==true and !@current_user.privileges.map{|m| m.id}.include?(16)
      # @subjects= Subject.find(:all,:joins=>"INNER JOIN employees_subjects ON employees_subjects.subject_id = subjects.id AND employee_id = #{@current_user.employee_record.id} AND batch_id = #{@batch.id} ")
    # end
    # render(:update) do |page|
      # page.replace_html 'subjects', :partial=> 'subjects'
    # end
  end
  
  def attendance_change_batch  
   @batches = Batch.find(:all, :conditions => {:course_id => params[:q], :is_active => true})
   render :partial => 'batch_attendance'
  end
  
  def attendance_subject_wise_change_batch  
   @batches = Batch.find(:all, :conditions => {:course_id => params[:q], :is_active => true})
   render :partial => 'subject_wise_batch'
  end
  
  
  def show
    puts("The params are#{params}")
    @absents = []
    @config = SchoolConfiguration.find_by_config_key('StudentAttendanceType')  
      unless params[:period_entry_date].nil?
        @today = params[:period_entry_date].to_date
      else
        @today = Date.today
      end
      start_date = @today.beginning_of_month
      end_date = @today.end_of_month
    if params[:subject_id] == nil
      @batch = Batch.find(params[:batch_id])
      @students = Student.find_all_by_batch_id(@batch.id)
      @dates = PeriodEntry.find_all_by_batch_id(@batch.id, :conditions =>{:month_date => start_date..end_date}, :order=>'month_date asc')
    else
      @sub =Subject.find params[:subject_id]
      @batch = @sub.batch_id
      @students = Student.find_all_by_batch_id(@batch)
      @dates = PeriodEntry.find_all_by_batch_id_and_subject_id(@batch,@sub.id,  :conditions =>{:month_date => start_date..end_date},:order=>'month_date ASC')    
    end
    period_entry_date = (params[:period_entry_date].to_date).strftime('%Y''-''%m''-''%d')

    period_id = PeriodEntry.find_by_month_date_and_batch_id(period_entry_date, @batch) 
    
    unless period_id.nil?
    @students.each do |stu|
       @absents << Attendance.find_by_student_id_and_period_table_entry_id(stu.id, period_id.id)
    end
    absentS_id = []
   @absents.each do |ab|
     if ab!= nil
     absentS_id << ab.student_id
     end
   end
    respond_to do |format|
      student = []
      studentId = []
      student_id = []
      admissionNo = []
      rollNo = []
      lastName = []
      dates = []
      datesId = []
      absentee = []
      @dates.each do |d|
        dates << (d.month_date).strftime('%d''-''%m''-''%Y')
        datesId << d.id
      end
     @students.each do |s|
       student << s.full_name
       studentId << s.id
       admissionNo << s.admission_no
       lastName << s.last_name
     end
      @students.each do |a|
        rollNo << a.class_roll_no
        @dates.each do |b|
          @absentee = Attendance.find_all_by_student_id_and_period_table_entry_id(a.id, b.id)
          @absentee.each do |u|
                @periodss = PeriodEntry.find_all_by_id(u.period_table_entry_id)   
                  @periodss.each do |v|
                  absentee << (v.month_date).strftime('%d''-''%m''-''%Y')
                  end
                @studentsp = Student.find_all_by_id(u.student_id)
                  @studentsp.each do |w|
                        student_id << w.id    
                  end
          end
        end
      end
        format.json { render :json => {:valid => false,:today =>@today.strftime('%d''-''%m''-''%Y'),:absentS_id => absentS_id,:rollNo => rollNo, :absentee => absentee, :student => student,:studentId => studentId,:student_id => student_id, :admission_no => admissionNo ,:last_name => lastName,:dates => dates,:datesId => datesId}}
    end
    else
       respond_to do |format|    
          format.json { render :json => {:valid => true, :notice => "Period entry not found."}}
       end
    end
  end

  def new
    @config = SchoolConfiguration.find_by_config_key('StudentAttendanceType')
    @absentee = Attendance.new
    @student = Student.find(params[:id2])
    @period_entry_id = params[:id]
    respond_to do |format|
      format.js { render :action => 'new' }
    end
  end

  def create
    unless params[:attendance][:student_id] == nil
    @student = []
    @deletedId_are = []
    @config = SchoolConfiguration.find_by_config_key('StudentAttendanceType')
    params[:attendance][:student_id].each do |s|
        if s!=nil
        @student << Student.find(s)
        end
    end
    period_entry = (params[:attendance]['period_table_entry_id'].to_date).strftime('%Y''-''%m''-''%d')
     @student.each do |de|
       @deletedId_are << de.id
     end
    @period_ettntry = PeriodEntry.find_by_month_date_and_batch_id(period_entry, params[:batch_id],:order=>'month_date asc')
    @teams = Attendance.where("student_id NOT IN (?)", @deletedId_are).find(:all , :conditions => {:period_table_entry_id => @period_ettntry})
    @all_student = Student.find_all_by_batch_id(params[:batch_id])
        if !@teams.nil?
         @teams.each do |as|
             @all_student.each do |sd|
                if sd.id == as.student.id   
                 @ss = Attendance.find_by_student_id_and_period_table_entry_id(sd.id,@period_ettntry)
                 @ss.destroy 
                end
            end
          end
        end
      @student.each do |a|
          params[:attendance]['student_id'] = a.id
          params[:attendance]['period_table_entry_id'] = period_entry
          @period_entry = PeriodEntry.find_by_month_date_and_batch_id(params[:attendance][:period_table_entry_id],params[:batch_id],:order=>'month_date asc')
         if @period_entry!=nil
          params[:attendance]['period_table_entry_id'] = @period_entry.id
          @absentee = Attendance.new(params[:attendance])
          
            if @absentee.save
              @students = Student.find_all_by_batch_id(params[:batch_id])
                    unless params[:next].nil?
                      @today = params[:next].to_date
                    else
                      @today = Date.today
                    end
                    start_date = @today.beginning_of_month
                    end_date = @today.end_of_month
                    @dates = PeriodEntry.find_all_by_batch_id(params[:batch_id], :conditions =>{:month_date => start_date..end_date},:order=>'month_date ASC')
           else
                flash[:notice] = "Attendance can not be marked."      
           end
           end
     end

      respond_to do |format|    
          format.json { render :json => {:valid => true, :notice => "Attendance Marked sucessfully."}}
       end
    else
      @delete_absent = []
      period_entry = (params[:attendance]['period_table_entry_id'].to_date).strftime('%Y''-''%m''-''%d')
      period_entry_id = PeriodEntry.find_by_month_date(period_entry)
      @students = Student.find_all_by_batch_id(params[:batch_id])
      @students.each do |des|
        if des != nil
         @delete_absent << Attendance.find_by_period_table_entry_id_and_student_id(period_entry_id,des.id)
       end
      end
      @delete_absent.each do |delete_attendance|
        if delete_attendance != nil
        delete_attendance.destroy
        end
      end
      respond_to do |format| 
          format.json { render :json => {:valid => true, :notice => "Attendance Marked Successfully."}}
      end
    end
end

  def create_subject_wise_attendance
    puts("The Params are #{params}")
    unless params[:attendance][:student_id] == nil
    @student = []
    @deletedId_are = []
    @period_ettntry = []
    @config = SchoolConfiguration.find_by_config_key('StudentAttendanceType')
    params[:attendance][:student_id].each do |s|
        if s != nil
        @student << Student.find(s)
        end
    end
    period_entry = (params[:attendance]['period_table_entry_subject_wise_id'].to_date).strftime('%Y''-''%m''-''%d')
    
     @student.each do |de|
       @deletedId_are << de.id
     end
     
    params[:batch_id].each do |bi|
    @period_ettntry << PeriodEntrySubjectWise.find_by_month_date_and_subject_id(period_entry, params[:subject_id],:order=>'month_date asc')
       @period_ettntry.each do |pei|
         puts("The pie is #{pei}")
          @teams = AttendanceSubjectWise.where("student_id NOT IN (?)", @deletedId_are).find(:all , :conditions => {:period_table_entry_subject_wise_id => pei})
          @all_student = Student.find_all_by_batch_id(bi)
            if !@teams.nil?
             @teams.each do |as|
                 @all_student.each do |sd|        
                    if sd.id == as.student.id               
                     @ss = AttendanceSubjectWise.find_by_student_id_and_period_table_entry_subject_wise_id(sd.id,pei)
                     @ss.destroy 
                    end
                 end
             end
           end
       end
      @student.each do |a|
          params[:attendance]['student_id'] = a.id
          params[:attendance]['period_table_entry_subject_wise_id'] = period_entry
          @period_entry = PeriodEntrySubjectWise.find_by_month_date_and_subject_id(params[:attendance][:period_table_entry_subject_wise_id],params[:subject_id],:order=>'month_date asc')
         puts("the period entry is #{@period_entry}")
         if @period_entry!=nil
          params[:attendance]['period_table_entry_subject_wise_id'] = @period_entry.id
            params[:attendance]['batch_id'] = a.batch_id
          @absentee = AttendanceSubjectWise.new(params[:attendance])
          
            if @absentee.save
              @students = Student.find_all_by_batch_id(bi)
                    unless params[:next].nil?
                      @today = params[:next].to_date
                    else
                      @today = Date.today
                    end
                    start_date = @today.beginning_of_month
                    end_date = @today.end_of_month
                    @dates = PeriodEntrySubjectWise.find_all_by_batch_id(bi, :conditions =>{:month_date => start_date..end_date},:order=>'month_date ASC')
           else
                flash[:notice] = "Attendance can not be marked."      
           end
           end
     end
 end
      respond_to do |format|    
          format.json { render :json => {:valid => true, :notice => "Attendance Marked Sucessfully."}}
       end
    else
      @delete_absent = []
      @students = []
      period_entry = (params[:attendance]['period_table_entry_subject_wise_id'].to_date).strftime('%Y''-''%m''-''%d')
      period_entry_id = PeriodEntrySubjectWise.find_by_month_date(period_entry)
      params[:batch_id].each do |bi|
      @students = Student.find_all_by_batch_id(bi)
      @students.each do |des|
        if des != nil
         @delete_absent << AttendanceSubjectWise.find_by_period_table_entry_subject_wise_id_and_student_id(period_entry_id,des.id)
       end
      end
      @delete_absent.each do |delete_attendance|
        if delete_attendance != nil
        delete_attendance.destroy
        end
      end
      end
      respond_to do |format| 
          format.json { render :json => {:valid => true, :notice => "Attendance Marked Successfully."}}
      end
    end
end



 def show_subject_wise
    @absents = []
    @student_subjet_wise = []
    @config = SchoolConfiguration.find_by_config_key('StudentAttendanceType')  
      unless params[:period_entry_date].nil?
        @today = params[:period_entry_date].to_date
      else
        @today = Date.today
      end
      start_date = @today.beginning_of_month
      end_date = @today.end_of_month
      @sub =Subject.find params[:subject_id]
      @batch = @sub.batch_id
      @students = StudentsSubject.find_all_by_subject_id(@sub)
      @dates = PeriodEntrySubjectWise.find_all_by_batch_id_and_subject_id(@batch,@sub.id,  :conditions =>{:month_date => start_date..end_date},:order=>'month_date ASC')    
      period_entry_date = (params[:period_entry_date].to_date).strftime('%Y''-''%m''-''%d')
      period_id = PeriodEntrySubjectWise.find_by_month_date_and_batch_id(period_entry_date, @batch) 
    
    @students.each do |sb|
      @student_subjet_wise << Student.find_by_id(sb.student_id)
    end
 
    @student_subjet_wise.each do |stu|
       @absents << AttendanceSubjectWise.find_by_student_id_and_period_table_entry_subject_wise_id(stu, period_id)
    end

    absentS_id = []
    absents_batch_id = []
       @absents.each do |ab|
             if ab!= nil
             absentS_id << ab.student_id
             absents_batch_id << ab.batch_id
             end
       end
    respond_to do |format|
      student = []
      studentId = []
      admissionNo = []
      rollNo = []
      batchName = []
      batchId = []
      dates = []
      datesId = []
      absentee = []
      @dates.each do |d|
        dates << (d.month_date).strftime('%d''-''%m''-''%Y')
        datesId << d.id
      end
             @student_subjet_wise.each do |s|
               student << s.full_name
               studentId << s.id
               admissionNo << s.admission_no
               rollNo << s.class_roll_no
               batchName << s.batch.name
               batchId << s.batch_id
             end  
             format.json { render :json => {:valid => false,:today =>@today.strftime('%d''-''%m''-''%Y'),:student => student, :admission_no => admissionNo,
               :rollNo => rollNo,:studentId => studentId,:batchName => batchName,:batchId => batchId,:absentS_id => absentS_id,:absents_batch_id => absents_batch_id,:period_id =>period_id}}
     end
     
    # else
        # puts("I am in inside unlessbbbbbbbbbbbb#{}") 
       # respond_to do |format|    
          # format.json { render :json => {:valid => true, :notice => "Period entry not found."}}
       # end
     # end

  end





def edit
  @config = SchoolConfiguration.find_by_config_key('StudentAttendanceType')
  @absentee = Attendance.find params[:id]
  @student = Student.find(@absentee.student_id)
  respond_to do |format|
    format.html { }
    format.js { render :action => 'edit' }
  end
end

def update
  @absentee = Attendance.find params[:id]
  @student = Student.find(@absentee.student_id)
  @period_entry = PeriodEntry.find @absentee.period_table_entry_id

    if @absentee.update_attributes(params[:attendance])
      @batch = @student.batch
      @students = Student.find_all_by_batch_id(@batch.id)
      unless params[:next].nil?
        @today = params[:next].to_date
      else
        @today = Date.today
      end
      start_date = @today.beginning_of_month
      end_date = @today.end_of_month
      @dates = PeriodEntry.find_all_by_batch_id(@batch.id, :conditions =>{:month_date => start_date..end_date},:order=>'month_date ASC')
    else
      @error = true
  end
  respond_to do |format|
      format.js { render :action => 'update' }
    end
end


def destroy
  @absentee = Attendance.find params[:id]
  @absentee.delete
  @student = Student.find(@absentee.student_id)
  @period_entry = PeriodEntry.find @absentee.period_table_entry_id
  respond_to do |format|
    @batch = @student.batch
    @students = Student.find_all_by_batch_id(@batch.id)
    unless params[:next].nil?
      @today = params[:next].to_date
    else
      @today = Date.today
    end
    start_date = @today.beginning_of_month
    end_date = @today.end_of_month
    @dates = PeriodEntry.find_all_by_batch_id(@batch.id, :conditions =>{:month_date => start_date..end_date},:order=>'month_date ASC')
    format.js { render :action => 'update' }
  end
end



end
