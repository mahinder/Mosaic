require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
 
describe BankFieldsController do

before(:each) do
       @current_user = User.create!(:username => 'admin',:password => 'admin123',:first_name => 'Fedena', :last_name => 'Administrator',:email=> 'admin@fedena.com',:role=> 'Admin')
      session[:user_id] = @current_user.id
    end
    
 render_views
 
 describe "GET 'all'" do
     before(:each) do
       first = BankField.create!(:name => "name")
       second = BankField.create!(:name => "name3")
       third = BankField.create!(:name => "name2", :status => false)
       third = BankField.create!(:name => "name4", :status => false)
     end
     
     it "should be successful" do
        get :all_record
        response.should be_success
     end
     it "should have bank fields in html table" do
        get :all_record
         response.should have_selector('td', :content => "name")
         response.should have_selector('td', :content => "name4")
        response.should have_selector('td', :content => "name2")
        
     end    
   end
describe "GET 'index'" do
     it "should be successful for index action" do
        get :index
        response.should be_success
     end
  end   
   describe "JSON POST 'create'" do
   describe "failure" do
     before(:each) do
       first = BankField.create!(:name => "field")
        @attribute = { :name => 'field', :status => true }
     end
     it "should be resopnd with error for same name" do
          post :create, :bank_field => @attribute, :format => :json
          parsed_body = JSON.parse(response.body)
          parsed_body['errors']['name'][0].should =~ /has already been taken/
       end
        it "should be resopnd with error for name presence" do
           @attribute = { :name => "", :status => true }
          post :create, :bank_field => @attribute, :format => :json
          parsed_body = JSON.parse(response.body)
          parsed_body['errors']['name'][0].should =~ /can't be blank/
       end
   end
   describe "success" do
      
      before(:each) do
        @attribute = { :name => 'bank_field', :status => true }
      end
      
      it "should successfully add record" do
        lambda do
          post :create, :bank_field => @attribute, :format => :json
        end.should change(BankField, :count).by(1)
      end
       
      it "should have right message" do
        post :create, :bank_field => @attribute, :format => :json
        parsed_body = JSON.parse(response.body)
        parsed_body['notice'].should =~ /bank field was successfully created./
      end
    end
   end
  describe "PUT 'update'" do
     describe "success" do
      
      before(:each) do
        @bank_field = Factory(:bank_field)
        @attr = { :name => "field_name", :status => true }
      end
       it "should update attributes" do
        put :update, :id => @bank_field, :bank_field => @attr, :format => :json
       @bank_field.reload
       @bank_field.name.should == @attr[:name]
       @bank_field.status.should == @attr[:status]
       parsed_body = JSON.parse(response.body)
       parsed_body['notice'].should =~ /Bank Field was updated successfully./
      end
      end
    end
     describe "Delete 'Destroy'" do
       
         before(:each) do
        @bank_field = Factory(:bank_field)
         @employee_attr = { :employee_number => 'EMPLO',:joining_date =>20.days.ago,:first_name => 'Anuj',:last_name => 'Kumar',
       :employee_department_id => 1,:employee_grade_id =>1 ,:employee_position_id => 1,
       :employee_category_id => 1,:date_of_birth => Date.today-365
     }
         @employee = Employee.create!(@employee_attr)
         @employee_additional_detail = EmployeeBankDetail.create!(:employee_id => @employee, :bank_field_id => @bank_field)
        end
        it "should delete bank fields" do
       
          delete :destroy, :id => @bank_field, :format => :json
          parsed_body = JSON.parse(response.body)
       parsed_body['errors']['dependecies'][0].should == "Bank field cannot be delete"
        
      end
       
     end
end
